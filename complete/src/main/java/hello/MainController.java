package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path = "/list")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path = "/{id}")
	public @ResponseBody User getUserById(@PathVariable Long id) {
		// This returns a JSON or XML with the users
		return userRepository.findOne(id);
	}

	@GetMapping(path = "/filter")
	public @ResponseBody Iterable<User> getUserByName(@RequestParam String name) {
		if (name == null || name.trim().length() == 0) {
			return userRepository.findAll();
		}
		return userRepository.findByName(name);
	}

	@PostMapping(path = "/delete")
	public @ResponseBody String deleteUser(@RequestParam Long id) {
		User n = userRepository.findOne(id);
		if (n == null) {
			return "user not exist";
		}
		userRepository.delete(n);
		return "user deleted";
	}
}
